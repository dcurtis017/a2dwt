Typescript:
The difference between your two import declarations is covered in the TypeScript specification. From ยง11.3.2, Import Declarations:

An import declaration of the form

import d from "mod";

is exactly equivalent to the import declaration

import { default as d } from "mod";
Thus, you would omit the braces only when you are importing something that was exported as the default entity of the module (with an export default declaration, of which there can only be one per module). The name you provide in the import declaration becomes an alias for that imported entity.

When importing anything else, even if it's just one entity, you need to provide the braces.

The Default exports section of the TypeScript handbook has a few examples.

Chapter 2: Getting Started

--> Modules
An angular module is a container for a group of related components, services, directives...

A module can be though of as a library of components and services that implements ceratin functionality from the business domain of your application such as a shipping or billing module.

A small app may use one module (the root module) but a large app may have more than one module (one root many feature modules)

All apps must have a root module that is bootstrapped on app launch

Modules are annotated with the NgModule decorator

The root module must import BrowserModule, but if an app also has feature modules you will need to import CommonModule instead

Members of all imported modules are available to all components of the modules

To load and compile a module on app start up use: platformBrowserDynamic().bootstrapModule(AppModule)

--> Components
Each component consists of a view that defines the UI and a class that implements the logic behind the view

Any angular app represents a hierarchy of components packaged in modules.

An app must have at least 1 module and 1 component (the root component)

Any component assigned to the boostrap prperty of the module becomes the root component

Components use the decorator Components

--> Directives

Use the Diretive decorator and allow you to attach custom behavior to an HTML element

Components are basically directives with views

Ex:
import {Directive, ElementRef, Renderer } from '@angular/core';

@Directive({selector: '[highlight]'})
export class HighlightDirective{
    constructor(renderer: Renderer, el: ElementRef)
    {
        renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'blue');
    }
}
--would be used as: <h1 highlight>hello world</h1>

All directives that are used in a module need to be added to the declaration property of the @NgModule decorator


--> Data Binding

Allows you to keep a component's properties in sync with th eview

<h1>Hello {{ name }} </h1> -- curly braces are used to display a value in a template

<span [hidden]="isValid">required</span> -- square brackets bind and html element's property to a value

<button (click)="bid()">bid</button> -- parenthesis are used to bind an event handler for an element's event

<input #title type="text"  />
<span>{{ title.value }}</span> -- If you want to reference a DOM object's property within the template add a local template variable (the variable name must start with #) that will
automatically store a reference to the corresponding DOM object and use it via dot notation

--> SystemJS Universal Module Loader

Loading code w/ systemjs is an alternative to using a bunch of script tags

--> an overview of module loaders

Early es6 drafts included a global System objec that was responsible for loading modules into the execution environment. This was later removed

The es6 module loader polyfill offers one way to use the system object today.

--> module loader vs script tags

often the order of script tags matters

Whenever you import a module into your code, the loader will match the odule name to a corresponding file, download it into the browser and execute ther est of the code.

Modules keep projects organized because the module loader automatically assembles everything together in the browser before you launch the app, even loading dependencies

The module loader can also be used to combine all modules into a single bundle

--> Getting started with systemjs

Two primary methods are System.import() and System.config()

To load a module using System.import and the modules path or logical name that is mapped to the path

If the module name starts with ./ it's a path to the file even if the extension is omitted. SystemJS first tries to match the module name against the configured mapping provided either
as an argument to the method System.config or in a file. If the mapping for the name isn't foudn ,it's considered to be a path to a file.


The System.import method returns a promise object.  The then callback is invoked when teh module is loaded.

An es6 module object contains a property for each exported value in teh loaded module

--> Configuring SystemJS

baseURL - all modules are loaded relative to this url unless the module name represents an absolute or realtive URL
ex:
System.config({ baseURL: '/app' });
System.import('es6module.js');   // GET /app/es6module.js
System.import('./es6module.js'); // GET /es6module.js
System.import('http://example.com/es6module.js'); // GET http://example.com/

defaultJSExtensions - the .js extension will be added to all paths that don't end in .js. This is used to provide backward compatability

map - allows you to create an alias for a module name. When you import a module, the module name is replaced with an associated value, unless the original module name represents any kind of path (absolute or relative)
ex:
System.config({ map: { 'es6module.js': 'esSixModule.js' } });
System.import('es6module.js');   // GET /esSixModule.js
System.import('./es6module.js'); // GET /es6Module.js

ex:
System.config({
  baseURL: '/app',
  map: { 'es6module': 'esSixModule.js' }
});
System.import('es6module'); // GET /app/esSixModule.js

packages - provide a way to set metadata and a map configuration that's specific to a common path.
ex:
System.config({
  packages: {
    app: {
      defaultExtension: "ts",
      main: "main_router_sample"
    }
  }
});
System.import('app'); -- System.import('app') should load the module located in main_router_sample.ts

paths - similar to map but supports wildcards. It's applied after map but before baseURL. You can use map and paths but only map is recognized by systemjs
ex:
System.config({
  baseURL: '/app',
  map: { 'es6module': 'esSixModule.js' },
  paths: { '*': 'lib/*' }
});

System.import('es6module'); // GET /app/lib/esSixModule.js

**If you see an exmaple with System.import('app') which opens a file with a different name it's because the map or packages property was confiugred. For example
import {Component} from '@angular/core'; the @angular refers to the name mapped to the actual directory where the Angular framework is locatd and core is a subdirectory
and the main file in that subdirectory is specified in teh SystemJS config
ex:
packages: {
        '@angular/core' : {main: 'index.js'}
}

transpiler - allows you to specify teh name of the transpiler module that shoudl be used when loading app modules. If a file doesn't contain at least 1 import or export statement
it will not be transpiled. Valid options are typescript, traceur and babel

typescriptOptions - allows you to set the Typescript compiler options

--> Selecting a Package Manager



Chapter 3: Navigation

You can split an application into one root module and one ore more feature modules. Feature modules can be loaded eagerly or lazily.

To lazy load a module use the loadChildren property of in teh route configuration. You would then configure the path in the components to be empty.

Routes are configured using RouterModule.

You can select a location strategy to control how the url looks.

The router outputs content into the <router-outlet> tags. There can be more than one router-outlet

Use the routerLink property instead of the href attribute

-> Routing Basics
The router is responsible for managing client-side navigation.

-> Location Strategies
HashLocationStrategy - A hash sign is added to the url and the url segment after the hash idenfies the route to the used
as a web page fragment. This will work in all browsers

PathLocationStrategy - This history API based strategy is supported only in browsers that support html5. This is the default
for angular

The browser's history API allows you to move back and forth through the user's navigation history as welss as programatically
manipulate history. The pushState() method is used to attache a segment to the baseURL as the user navigates your SPA

You need to tell angular what to use as a base url by:
 * Add the <base> tag to the header of index.html ex <base href = "/">
 * Assign a value for the APP_BASE_HREF angular constant in the root module and use it as the providers value;
 import { APP_BASE_HREF } from '@angular/common';
...
@NgModule({
...
  providers:[{provide: APP_BASE_HREF, useValue: '/'}]
})
class AppModule { }

-> The building blocks of client-side navigation
If your application needs routing you need to include the @angular/router dependency in packages.json
so you can access the RouterModule module.

The main players are:
Router - an object that represents the router at runtime. You can use its navigate() and navigateByUrl() methods to navigate to a route
either by the configured route path or by the url segment respectively
RouterOutlet - a directive that serves as a placeholder within your web page (<router-outlet>)
Routes - an array of routes that map urls to components rendered in the RouterOutlet
RouterLInk - a directive for declaring a link to a route if the navigation is done using html anchor tags.
ActivatedRoute - an object that represents the rotue or routes that are currently active

Route configuration is done on the module level so you need to import routes int he @NgModule decorator. If you declare routes for the root modules,
you should use the forRot() method. Ex:
import { RouterModule, Routes } from '@angular/router';
const routes: Routes = [{path:'', component: HomeComponent}];
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
...
@NgModule({
  imports: [ BrowserModule, RouterModule.forRoot(routes)],
    ...
})

If you're configuring rotues for a feature module use forChild()
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
...
@NgModule({
  imports: [ CommonModule, RouterModule.forChild(routes)],
    ...
})

You can store your routes in a separte file and export the routes constant;
...
export const routing = RouterModule.forRoot(routes);

None of the components are aware of the router configuration because it's the module's business.

To use hashlocationstrategy:
providers:[{provide: LocationStrategy, useClass: HashLocationsStrategy}]

You can define a route  using the wildcard path (**) if this is the last entry, it will show that component whenever the user goes to a route that does not match an entry

-> Extracting parameters from routes
You need to inject an ActivatedRoute into the constructor of your component. Values are stored in ActivatedRoute.snapshot.params which has an index for the name of the param
Your path should have :{paramname} ex: product/:id
You can then use the router link like: <a [routerLink]="['/product', 1234]">Details</a>

-> Passing static data to a route
Use the data property of your route configuration
ex: {path: 'product/:id', component: ProductComponet, data: [{isProd:true}]}
access it using route.snapshot.data[0]['isProd'];

-> Child Routes
An angular application is a tree of components that have parent-child relationships. Each component is well encapulated and you have full control over what you expose to the rest of the application.
Any component can have its own styles that won't mix with parent styles. A component can also have its own dependency injectors. A child component can have its own routes,
but all routes are configured outside of any component.

Child components can have their own router-outlet

To do this use the children property of the route ex:
[ {path: '',            component: HomeComponent},
  {path: 'product/:id', component: ProductDetailComponent,
    children: [
      {path: '', component: ProductDescriptionComponent},
      {path: 'seller/:id', component: SellerInfoComponent}
    ]}
]

**Child components don't need to be imported.
**look up ShadowDOM

-> Guarding Routes
The router has hooks that give you more control over the nagiation to and from a route.
If canActivte() of the guard returns true the user can navigate to a route.
If canDeactivate() returns true the user can navigate away from the route.
The canActivate and canDeactivate properties of Route take an array of classes that implement the appropriate interface and are called sequentially
Guard classes should be declared in the module's providers

**if you want to wait for some async data before navigating to a route use hte resolve property whle configuring the route. The router won't instantiate teh configured component until the function completes

-> Using multiple router outlets
In angular you can have auxilary outlets which are displayed at the same time as the primary one.

To separate rendering you add another router-outlet and give it a name attribute <router-outlet name = "chat"></router-outlet>
and specify the name of the outlet in the route.

In the link specify which component will render to the primary and which to the auxilary:
<a [routerLink] = "[{outlets: {primary: 'home', aux: 'chat'}}]">Open</a>

To remove the named outlet with its' content give a null value
<a [routerLink] = "[{outlets: {aux: null}}]">Close</a>

If you want to navigate programatically use:
navigate([{outlets: {aux: 'chat'}}])

-> splitting the page into modules
The root module is bootstrapped and the feature modules are imported.

Each module can expose and hide certain functionality and all modules are executed in the same contextxt so they can share objects

Feature modules should be placed in a separate directory

-> Lazy Loading Modules
To use lazy loading, in your route path use the loadChildren property and pass it the path to the module

Chapter 4: Dependency Injection

--> The dependency injection and inversion of control patterns

DI: If object A depends on an object of type B, A won't explicitly instantiate object B (as with the new operator).
B will be injected from the operational environment. A just needs to declare that it needs an object of type B.

IoC: A more general pattern of DI. Rather than making your application use some API from a framework, the frameworkcreates and supplies
the objects taht the application needs. IoC can be implemented in different ways and DI is one way.
Angular plays the role of IoC container and can provide the required objects according to your component's declarations

Benefits of DI:
Loose coupling and reusability
**In angualr you register objects for DI by specifying providres. A provider is an instruction to Angular about
how to create an isntance of an object for future injection into a target component or directive. 
A provider is an instruction to Angular about how to create an instance of an object for future injection into a
target component or directive
[ProduceService] is shorthand for [{provide: ProductService, useClass: ProductService}]

Testability
**DI lets you easily inject mock objects into your test code.


--> Injectors and providers
Each component can have an Injector instance capable of injecting objects or primative values into a component or service.
Any angular application has a root injector available to all its modules. To let the injector know what to inject you specify teh provider
An injector will inject the object or value specified in the provider into the constructor of a component.

*Although eagerly loaded modules don't have their own injectors, a lazy-loaded module has its own sub-root injector that's a direct child of the application root injector.

Providers allow you to map a custom type (or a token) to a concret implementation of the type. You can specify providers eitehr inside teh components @Component decorator or as the property of @NgModule

*The providers line means: When you need to construct an object of this type, create an instance of the register class for injection

*Using the provider in @Component allows you to assign a provider to a specific component and all of its subcomponents
* Providers specified at the module level don't have to be redeclared at the component level
ex:
@NgModule({
  imports: [BrowserModule],
  providers: [NameService],
  declarations: [App],
  bootstrap: [App]
})
export class AppModule {}
@Component({})
class App {
  constructor(NameService: NameService) {//we don't need another declaration of the provider
    this.name = NameService.getName();
  }
}

**With typescript and the compiler option emitDecoratorMetadata set to true you don't need any annotations in the constructor to do DI
**Don't forget to import the class you are using as a provider if it's in another file
ex: import {NameService} from 'name-service';
The provider object has the following properties:
provide - token or short name (can match the name of the class or factory)
useClass - the name of the class you want to inject
useFactory - the name of the factory or an arrow function. Can have optional argument with dependencies
const IS_DEV_ENVIRONMENT: boolean = true;
@Component({
  selector: 'product2',

  providers:[{
    provide: ProductService,
    useFactory: (isDev) => {
      if (isDev){
        return new MockProductService();
      } else{
        return new ProductService();
      }
    },
    deps: ["IS_DEV_ENVIRONMENT"]}],

  template: '{{product.title}}'
})
useValue - string value to inject (ex: a url)
providers: [ProductService, {provide: "IS_DEV_ENVIRONMENT", useValue: true}]
--> Injecting the Http service
@NgModule must  mport HttpModule which defines Http providers. The class than needs http would then take and http object in its constructor

*the imports property of @NgModule makes the public components, directives and pipes of whatever is imported visible to the compnent templates in AppModule
*declarations are to make directives (including components and pipes) from teh current module available to other directives in teh current module

*Imports is used to import supporting modules and declarations declare things that belong to the current module. Everything in the list of declarations knows about each other
@Injectable() lets Angular know that a class can be used with the dependency injector. @Injectable() is not strictly required if the class has other Angular decorators on it or does not have any dependencies. What is important is that any class that is going to be injected with Angular is decorated. However, best practice is to decorate injectables with @Injectable(), as it makes more sense to the reader.+

@Inject() is a manual mechanism for letting Angular know that a parameter must be injected.
ex:  constructor(@Inject(ChatWidget) private chatWidget) { }

*Each component can override it's inherited providers declarations

--> OpaqueToken
using a hard coded string may case problems if more than one provider uses a string with the same value for different purposes

Opaquetoken class is preferable to using strings as tokens.
ex:
import {Component, OpaqueToken, Inject, NgModule} from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { BrowserModule } from '@angular/platform-browser';

export const BackendUrl  = new OpaqueToken('BackendUrl');

@Component({
  selector: 'app',
  template: 'URL: {{url}}'
})
class AppComponent {
  constructor(@Inject(BackendUrl) public url: string) {}
}

@NgModule({
  imports:      [ BrowserModule],
  declarations: [ AppComponent],
  providers: [  {provide:BackendUrl, useValue: 'myQAserver.com'}],
  bootstrap:    [ AppComponent ]
})
class AppModule { }

platformBrowserDynamic().bootstrapModule(AppModule);

Instead of injecting a vague string, you inject a concrete BACKEND_URL

-> Injector Heiarchy
When your code creates a component that requires a particular object to be injected, angualr looks for a provider of the requested object at the component level. If it's not found,
angular searches the parent components all the way up to the module. An error is thrown if the object isn't found in the heirarchy

Angular craetes an additional injector for a lazy loaded module. Providers declared in the @NgModule of a lazy loaded module are available in the module, but not the entire application

If providers for the same token were specified for both parent and child components, and each of thse components
had a constructor requesting an ojbect representing the token, two separate instances of such an object would be create: one for the parent and another for the child

-> viewProviders

If you want to ensure that an injectable service won't be visible to the component's children or other components,
use the viewProviders property instead of providers. 

Chapter 5: Bidings, observables and pipes